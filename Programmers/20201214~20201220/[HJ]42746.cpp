#include <string>
#include <vector>
#include <algorithm>

using namespace std;
bool comp(string s1, string s2)
{
    int size1 = s1.size();
    int size2 = s2.size();
    if(size1 == size2) return s1 > s2;
    
    // 1000의 자리까지 만들어줌.
    for(int i=0; i<5; i++)
    {
        char c_s1 = s1[i%size1];
        char c_s2 = s2[i%size2];
        
        if(c_s1 != c_s2) return c_s1 > c_s2;
    }
}
string solution(vector<int> numbers) {
    vector<string> strNumbers;    
    string answer = "";
    
    for(auto iter = numbers.begin(); iter != numbers.end(); iter++)
    {
        strNumbers.push_back(to_string(*iter));
    }
    sort(strNumbers.begin(), strNumbers.end(), comp);
    
    for(auto iter = strNumbers.begin(); iter!=strNumbers.end(); iter++)
    {
        answer += *iter;
    }
    return (answer[0]=='0') ? "0" : answer;
}
/*
 * 채점을 시작합니다.
 * 정확성  테스트
 * 테스트 1 〉	통과 (36.01ms, 10MB)
 * 테스트 2 〉	통과 (19.09ms, 6.72MB)
 * 테스트 3 〉	통과 (42.75ms, 10.7MB)
 * 테스트 4 〉	통과 (1.04ms, 3.96MB)
 * 테스트 5 〉	통과 (30.24ms, 7.77MB)
 * 테스트 6 〉	통과 (25.17ms, 7.27MB)
 * 테스트 7 〉	통과 (0.03ms, 3.95MB)
 * 테스트 8 〉	통과 (0.02ms, 3.96MB)
 * 테스트 9 〉	통과 (0.02ms, 3.97MB)
 * 테스트 10 〉	통과 (0.02ms, 3.95MB)
 * 테스트 11 〉	통과 (0.03ms, 3.95MB)
 * 채점 결과
 * 정확성: 100.0
 * 합계: 100.0 / 100.0
 * 점수: 6점
 */
/*
 * 해설
 * 1. 문제의 분류가 [정렬] 이므로 정렬을 이용.
 * 2. 큰 수를 만들어야 하므로, 역정렬을 한다.
 * 3. 정수형 배열 [9, 88, 777]을 역정렬하면 [777, 88, 9] 이나 큰 수를 만들기 위해서는
 *    [9, 88, 777]이 되어야 한다.
 *    -> 해결: 정수형이 아닌 문자열로 역정렬을 한다.
 *    -> 정의: 큰 수를 만들기 위하여 정렬할 때의 기준을 [숫자의 가치]라고 표현한다. (9:숫자의 가치 높음, 777:숫자의 가치 낮음)
 * 4. 문자열 배열 [9, 98, 987]을 역정렬 할 경우, [987, 98, 9] 가 된다.
 *    그러나 숫자의 가치는 [9, 98, 987] 이다.
 *    -> 해결: 숫자의 가치 기준으로 정렬하도록 한다. 
 * 5. 숫자의 가치 분석
 *    -1) 8의 숫자의 가치는 87보다 크고 89보다 작으며 88과 같다.
 *    -2) 8의 숫자의 가치는 887보다 크고 889보다 작으며 888과 같다.
 *    -3) 88의 숫자의 가치는 887보다 크고 889보다 작다.
 *    -4) 8의 경우, 8을 복제해서 숫자의 가치를 88, 888을 만든다.
 *    -5) 88의 경우 십의 자리 8과 일의 자리 8중 어떤 것을 복제해서 숫자의 가치를 올려야 할까?
 *    -6) 86으로 확인을 해본다면, 867과 비교했을때는, 867보다 숫자의 가치가 높으므로 867 < 86 이다.
 *    -7) 868과 비교 했을 경우는, 86 < 868 이다.
 *    -8) 867 < 86 < 868. 이므로 숫자의 가치는 867.5 정도이다.
 *    -9) 6을 가져 올수는 없으므로, 867.5 에서 반올림한 868을 만들어 주기 위해 8을 가져온다.
 *    -10) 867 < 868 < 868 에서 868간의 숫자의 가치 차이를 만들기 위해 천의 자리로 만들어 비교한다.
 *    -11) 868의 첫번째 값 8을 가져와서 8688을 만들어 준다.
 *    -12) 8678 < 868? < 8688. ?에 들어갈 수 있는 숫자 중 연관성이 있는 86의 일의 자리를 가져와서 8686으로 만든다.
 *    -13) 따라서 공식은 숫자의 자리 수를 [숫자의 자리%숫자.size()] 로 채운다.
 *    -> 예시1: 8 -> 88 -> 888 -> 8888
 *    -> 예시2: 86 -> 868 -> 8686 -> 86868
 *    -> 예시3: 867 -> 8678 -> 86786 -> 867867
 *    -14) 숫자가 0으로 구성되어 있을 경우, 0을 출력한다.
 */
